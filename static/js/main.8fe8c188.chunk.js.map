{"version":3,"sources":["components/FavoritesButton/HeartHollow.svg","components/FavoritesButton/HeartFull.svg","components/Navigation.js","components/SearchField.js","components/FavoritesButton/FavoritesButton.js","components/CurrentWeather.js","components/FiveDayForecast.js","components/WeatherDetails.js","components/Favorites.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","navStyle","display","justifyContent","backgroundColor","Navigation","routeChange","Nav","style","variant","defaultActiveKey","Item","Link","eventKey","onClick","AsyncTypeahead","asyncContainer","Typeahead","apiKey","SearchBox","props","onInputChange","query","setState","onSearch","isLoading","url","fetch","then","resp","json","options","onChange","selectedOptions","loadLocation","key","Key","city","LocalizedName","clearRequest","setTimeout","refs","SubjectTypeahead","getInstance","clear","state","textAlign","width","id","ref","placeholder","this","labelKey","React","Component","FavoritesButton","addRemoveCity","favCities","some","cityKey","location","toggle","float","src","HeartHollow","alt","marginRight","HeartFull","Button","size","console","log","CurrentWeather","fetchForecast","degreesC","Temperature","Metric","Value","WeatherText","prevProps","Math","round","FiveDayForecast","DailyForecasts","days","flexDirection","marginTop","map","day","Card","Body","Title","Date","EpochDate","getDay","Subtitle","className","Minimum","Maximum","WeatherDetails","Alert","height","Favorites","defaultLocation","App","onRouteChange","route","SearchField","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8fe8c188.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/HeartHollow.4ed65843.svg\";","module.exports = __webpack_public_path__ + \"static/media/HeartFull.efb08012.svg\";","import React from 'react';\r\nimport { Nav } from 'react-bootstrap';\r\n\r\nconst navStyle = {\r\n\tdisplay: 'flex',\r\n\tjustifyContent: 'flex-end',\r\n\tbackgroundColor: 'rgba(250, 250, 250, 0.9)'\r\n};\r\n\r\nconst Navigation = ({ routeChange }) => {\r\n\treturn (\r\n\t\t<Nav style={navStyle} variant=\"pills\" defaultActiveKey=\"home\">\r\n\t\t\t<Nav.Item>\r\n\t\t\t\t<Nav.Link eventKey=\"home\" onClick={() => routeChange('home')}>\r\n\t\t\t\t\tHome\r\n\t\t\t\t</Nav.Link>\r\n\t\t\t</Nav.Item>\r\n\t\t\t<Nav.Item>\r\n\t\t\t\t<Nav.Link eventKey=\"favorites\" onClick={() => routeChange('favorites')}>\r\n\t\t\t\t\tFavorites\r\n\t\t\t\t</Nav.Link>\r\n\t\t\t</Nav.Item>\r\n\t\t</Nav>\r\n\t);\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport { asyncContainer, Typeahead } from 'react-bootstrap-typeahead';\r\n\r\nconst AsyncTypeahead = asyncContainer(Typeahead);\r\nconst apiKey = 'nMRx8otmXihDcFOzxBaVBJVXM1OJ6O3Y';\r\n\r\nclass SearchBox extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tisLoading: false,\r\n\t\t\toptions: [],\r\n\t\t\tquery: ''\r\n\t\t}\r\n\t}\r\n\r\n\tonInputChange = (query) => {\r\n\t\tthis.setState({ query });\r\n\t}\r\n\r\n\tonSearch = (query) => {\r\n\t\tthis.setState({ isLoading: true });\r\n\r\n\t\tconst url = `http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${apiKey}&q=${query}`;\r\n\r\n\t\tfetch(url)\r\n\t\t\t.then(resp => resp.json())\r\n\t\t\t.then(json => this.setState({\r\n\t\t\t\tisLoading: false,\r\n\t\t\t\toptions: json\r\n\t\t\t}));\r\n\t}\r\n\t\r\n\tonChange = (selectedOptions) => {\r\n\t\tthis.props.loadLocation({\r\n\t\t\tkey: selectedOptions[0].Key,\r\n\t\t\tcity: selectedOptions[0].LocalizedName\r\n\t\t});\r\n\r\n\t\tthis.clearRequest();\r\n\t}\r\n\t\r\n\tclearRequest = () => {\r\n\t\tsetTimeout(() => this.refs.SubjectTypeahead.getInstance().clear(), 0);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div style={{ textAlign: 'center', width: 350 }}>\r\n\t\t\t\t<AsyncTypeahead\r\n\t\t\t\t\tid=\"AsyncTypeahead\"\r\n\t\t\t\t\tref=\"SubjectTypeahead\"\r\n\t\t\t\t\tplaceholder=\"Enter location\"\r\n\t\t\t\t\tisLoading={this.state.isLoading}\r\n\t\t\t\t\tlabelKey=\"LocalizedName\"\r\n\t\t\t\t\tonInputChange={this.onInputChange}\r\n\t\t\t\t\tonSearch={this.onSearch}\r\n\t\t\t\t\toptions={this.state.options}\r\n\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport HeartHollow from './HeartHollow.svg';\r\nimport HeartFull from './HeartFull.svg';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nclass FavoritesButton extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\ttoggle: 'off',\r\n\t\t\tfavCities: []\r\n\t\t};\r\n\t}\r\n\r\n\taddRemoveCity = () => {\r\n\t\tif (this.state.favCities.some(cityKey => (cityKey === this.props.location.key))) {\r\n\t\t\tthis.setState({ toggle: 'off' });\r\n\t\t} else {\r\n\t\t\tthis.setState({ toggle: 'on' });\r\n\t\t\tthis.setState({ favCities: this.props.location.key });\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div style={{ float: 'right' }}>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.toggle === 'off' ?\r\n\t\t\t\t\t\t<img src={HeartHollow} alt='Heart' width='35px' style={{ marginRight: 10 }}></img>\r\n\t\t\t\t\t\t: <img src={HeartFull} alt='Heart' width='35px' style={{ marginRight: 10 }}></img>\r\n\t\t\t\t}\r\n\t\t\t\t<Button variant=\"outline-danger\" size=\"sm\" onClick={this.addRemoveCity}>Add to Favorites</Button>\r\n\t\t\t\t{console.log(this.state.favCities)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default FavoritesButton;","import React from 'react';\r\n\r\nconst apiKey = 'nMRx8otmXihDcFOzxBaVBJVXM1OJ6O3Y';\r\n\r\nclass CurrentWeather extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcity: '',\r\n\t\t\tdegreesC: null,\r\n\t\t\tWeatherText: ''\r\n\t\t}\r\n\t}\r\n\r\n\tfetchForecast = () => {\r\n\t\tconst url = `http://dataservice.accuweather.com/currentconditions/v1/${this.props.location.key}?apikey=${apiKey}`;\r\n\r\n\t\tfetch(url)\r\n\t\t\t.then(resp => resp.json())\r\n\t\t\t.then(json => this.setState({\r\n\t\t\t\tcity: this.props.location.city,\r\n\t\t\t\tdegreesC: json[0].Temperature.Metric.Value,\r\n\t\t\t\tWeatherText: json[0].WeatherText\r\n\t\t\t}));\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.fetchForecast();\r\n\t}\r\n\t\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\tconst prevLocation = prevProps.location || {};\r\n\t\tif (prevLocation.key !== this.props.location.key) {\r\n\t\t\tthis.fetchForecast();\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h5>{this.state.city}</h5>\r\n\t\t\t\t<h6>{Math.round(this.state.degreesC)}&deg;C</h6>\r\n\t\t\t\t<h2 style={{ textAlign: 'center' }}>{this.state.WeatherText}</h2>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CurrentWeather;","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst apiKey = 'nMRx8otmXihDcFOzxBaVBJVXM1OJ6O3Y';\r\n\r\nclass FiveDayForecast extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tDailyForecasts: []\r\n\t\t}\r\n\t}\r\n\r\n\tfetchForecast = () => {\r\n\t\tconst url = `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${this.props.location.key}?apikey=${apiKey}&metric=true`;\r\n\r\n\t\tfetch(url)\r\n\t\t\t.then(resp => resp.json())\r\n\t\t\t.then(json => this.setState({\r\n\t\t\t\tDailyForecasts: json.DailyForecasts\r\n\t\t\t}));\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.fetchForecast();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps) {\r\n\t\tconst prevLocation = prevProps.location || {};\r\n\t\tif (prevLocation.key !== this.props.location.key) {\r\n\t\t\tthis.fetchForecast();\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\t\treturn (\r\n\t\t\t<div style={{ display: 'flex', flexDirection: 'row', marginTop: '2rem' }}>\r\n\t\t\t\t{this.state.DailyForecasts.map((day) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card style={{ width: '18rem' }}>\r\n\t\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t\t<Card.Title>{days[new Date(day.EpochDate * 1000).getDay()]}</Card.Title>\r\n\t\t\t\t\t\t\t\t<Card.Subtitle className=\"mb-2\">\r\n\t\t\t\t\t\t\t\t\t{Math.round((day.Temperature.Minimum.Value + day.Temperature.Maximum.Value) / 2)}&deg;C\r\n\t\t\t\t\t\t\t\t</Card.Subtitle>\r\n\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default FiveDayForecast;","import React from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\nimport FavoritesButton from './FavoritesButton/FavoritesButton';\r\nimport CurrentWeather from './CurrentWeather';\r\nimport FiveDayForecast from './FiveDayForecast';\r\n\r\nconst WeatherDetails = ({ location }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Alert variant={'success'} style={{ marginTop: 5, width: 460, height: 260 }}>\r\n\t\t\t\t<FavoritesButton location={location} />\r\n\t\t\t\t<CurrentWeather location={location} />\r\n\t\t\t\t<FiveDayForecast location={location} />\r\n\t\t\t</Alert>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default WeatherDetails;","import React from 'react';\r\n\r\nconst Favorites = ({  }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Favorites;","import React, { Component } from 'react';\nimport './App.css';\nimport Navigation from '../components/Navigation';\nimport SearchField from '../components/SearchField';\nimport WeatherDetails from '../components/WeatherDetails';\nimport Favorites from '../components/Favorites';\n\nconst defaultLocation = {\n\tkey: '215854',\n\tcity: 'Tel Aviv'\n};\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\troute: 'home',\n\t\t\tlocation: defaultLocation\n\t\t};\n\t}\n\n\tonRouteChange = (route) => {\n\t\tthis.setState({ route });\n\t}\n\n\tloadLocation = (location) => {\n\t\tthis.setState({ location });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Navigation routeChange={this.onRouteChange} />\n\t\t\t\t{\t\n\t\t\t\t\tthis.state.route === 'home' ?\n\t\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t\t<h1>What's The Weather</h1>\n\t\t\t\t\t\t\t<SearchField loadLocation={this.loadLocation} />\n\t\t\t\t\t\t\t<WeatherDetails location={this.state.location} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t: <Favorites />\n\t\t\t\t}\t\t\t\t\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}